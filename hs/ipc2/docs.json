[
  {
    "Constant" : [

    ],
    "submodules" : [

    ],
    "Function" : [
      {
        "doc" : "Gets the terminal escape codes used to produce colors in the `hs` command line tool\n\nParameters:\n * None\n\nReturns:\n * A table containing the terminal escape codes used to produce colors. The available keys are:\n  * initial\n  * input\n  * output\n  * error",
        "desc" : "Gets the terminal escape codes used to produce colors in the `hs` command line tool",
        "def" : "hs.ipc2.cliGetColors() -> table",
        "stripped_doc" : [
          "Gets the terminal escape codes used to produce colors in the `hs` command line tool",
          ""
        ],
        "notes" : [

        ],
        "signature" : "hs.ipc2.cliGetColors() -> table",
        "type" : "Function",
        "returns" : [
          " * A table containing the terminal escape codes used to produce colors. The available keys are:",
          "  * initial",
          "  * input",
          "  * output",
          "  * error"
        ],
        "name" : "cliGetColors",
        "parameters" : [
          " * None",
          ""
        ]
      },
      {
        "doc" : "Sets the terminal escape codes used to produce colors in the `hs` command line tool\n\nParameters:\n * table - A table of terminal escape sequences (or empty strings if you wish to suppress the usage of colors) containing the following keys:\n  * initial\n  * input\n  * output\n  * error\n\nReturns:\n * A table containing the terminal escape codes that have been set. The available keys match the table parameter.\n\nNotes:\n * For a brief intro into terminal colors, you can visit a web site like this one [http:\/\/jafrog.com\/2013\/11\/23\/colors-in-terminal.html](http:\/\/jafrog.com\/2013\/11\/23\/colors-in-terminal.html)\n * Lua doesn't support octal escapes in it's strings, so use `\\x1b` or `\\27` to indicate the `escape` character e.g. `ipc2.cliSetColors{ initial = \"\", input = \"\\27[33m\", output = \"\\27[38;5;11m\" }`\n * The values are stored by the `hs.settings` extension, so will persist across restarts of Hammerspoon",
        "desc" : "Sets the terminal escape codes used to produce colors in the `hs` command line tool",
        "def" : "hs.ipc2.cliSetColors(table) -> table",
        "stripped_doc" : [
          "Sets the terminal escape codes used to produce colors in the `hs` command line tool",
          ""
        ],
        "notes" : [
          " * For a brief intro into terminal colors, you can visit a web site like this one [http:\/\/jafrog.com\/2013\/11\/23\/colors-in-terminal.html](http:\/\/jafrog.com\/2013\/11\/23\/colors-in-terminal.html)",
          " * Lua doesn't support octal escapes in it's strings, so use `\\x1b` or `\\27` to indicate the `escape` character e.g. `ipc2.cliSetColors{ initial = \"\", input = \"\\27[33m\", output = \"\\27[38;5;11m\" }`",
          " * The values are stored by the `hs.settings` extension, so will persist across restarts of Hammerspoon"
        ],
        "signature" : "hs.ipc2.cliSetColors(table) -> table",
        "type" : "Function",
        "returns" : [
          " * A table containing the terminal escape codes that have been set. The available keys match the table parameter.",
          ""
        ],
        "name" : "cliSetColors",
        "parameters" : [
          " * table - A table of terminal escape sequences (or empty strings if you wish to suppress the usage of colors) containing the following keys:",
          "  * initial",
          "  * input",
          "  * output",
          "  * error",
          ""
        ]
      },
      {
        "doc" : "Restores default terminal escape codes used to produce colors in the `hs` command line tool\n\nParameters:\n * None\n\nReturns:\n * None",
        "desc" : "Restores default terminal escape codes used to produce colors in the `hs` command line tool",
        "def" : "hs.ipc2.cliResetColors()",
        "stripped_doc" : [
          "Restores default terminal escape codes used to produce colors in the `hs` command line tool",
          ""
        ],
        "notes" : [

        ],
        "signature" : "hs.ipc2.cliResetColors()",
        "type" : "Function",
        "returns" : [
          " * None"
        ],
        "name" : "cliResetColors",
        "parameters" : [
          " * None",
          ""
        ]
      },
      {
        "doc" : "Gets the status of the `hs` command line tool\n\nParameters:\n * path - An optional string containing a path to look for the `hs` tool. Defaults to `\/usr\/local`\n * silent - An optional boolean indicating whether or not to print errors to the Hammerspoon Console\n\nReturns:\n * A boolean, true if the `hs` command line tool is correctly installed, otherwise false",
        "desc" : "Gets the status of the `hs` command line tool",
        "def" : "hs.ipc2.cliStatus([path][,silent]) -> bool",
        "stripped_doc" : [
          "Gets the status of the `hs` command line tool",
          ""
        ],
        "notes" : [

        ],
        "signature" : "hs.ipc2.cliStatus([path][,silent]) -> bool",
        "type" : "Function",
        "returns" : [
          " * A boolean, true if the `hs` command line tool is correctly installed, otherwise false"
        ],
        "name" : "cliStatus",
        "parameters" : [
          " * path - An optional string containing a path to look for the `hs` tool. Defaults to `\/usr\/local`",
          " * silent - An optional boolean indicating whether or not to print errors to the Hammerspoon Console",
          ""
        ]
      },
      {
        "doc" : "Installs the `hs` command line tool\n\nParameters:\n * path - An optional string containing a path to install the tool in. Defaults to `\/usr\/local`\n * silent - An optional boolean indicating whether or not to print errors to the Hammerspoon Console\n\nReturns:\n * A boolean, true if the tool was successfully installed, otherwise false\n\nNotes:\n * If this function fails, it is likely that you have some old\/broken symlinks. You can use `hs.ipc2.cliUninstall()` to forcibly tidy them up",
        "desc" : "Installs the `hs` command line tool",
        "def" : "hs.ipc2.cliInstall([path][,silent]) -> bool",
        "stripped_doc" : [
          "Installs the `hs` command line tool",
          ""
        ],
        "notes" : [
          " * If this function fails, it is likely that you have some old\/broken symlinks. You can use `hs.ipc2.cliUninstall()` to forcibly tidy them up"
        ],
        "signature" : "hs.ipc2.cliInstall([path][,silent]) -> bool",
        "type" : "Function",
        "returns" : [
          " * A boolean, true if the tool was successfully installed, otherwise false",
          ""
        ],
        "name" : "cliInstall",
        "parameters" : [
          " * path - An optional string containing a path to install the tool in. Defaults to `\/usr\/local`",
          " * silent - An optional boolean indicating whether or not to print errors to the Hammerspoon Console",
          ""
        ]
      },
      {
        "doc" : "Uninstalls the `hs` command line tool\n\nParameters:\n * path - An optional string containing a path to remove the tool from. Defaults to `\/usr\/local`\n * silent - An optional boolean indicating whether or not to print errors to the Hammerspoon Console\n\nReturns:\n * A boolean, true if the tool was successfully removed, otherwise false\n\nNotes:\n * This function used to be very conservative and refuse to remove symlinks it wasn't sure about, but now it will unconditionally remove whatever it finds at `path\/bin\/hs` and `path\/share\/man\/man1\/hs.1`. This is more likely to be useful in situations where this command is actually needed (please open an Issue on GitHub if you disagree!)",
        "desc" : "Uninstalls the `hs` command line tool",
        "def" : "hs.ipc2.cliUninstall([path][,silent]) -> bool",
        "stripped_doc" : [
          "Uninstalls the `hs` command line tool",
          ""
        ],
        "notes" : [
          " * This function used to be very conservative and refuse to remove symlinks it wasn't sure about, but now it will unconditionally remove whatever it finds at `path\/bin\/hs` and `path\/share\/man\/man1\/hs.1`. This is more likely to be useful in situations where this command is actually needed (please open an Issue on GitHub if you disagree!)"
        ],
        "signature" : "hs.ipc2.cliUninstall([path][,silent]) -> bool",
        "type" : "Function",
        "returns" : [
          " * A boolean, true if the tool was successfully removed, otherwise false",
          ""
        ],
        "name" : "cliUninstall",
        "parameters" : [
          " * path - An optional string containing a path to remove the tool from. Defaults to `\/usr\/local`",
          " * silent - An optional boolean indicating whether or not to print errors to the Hammerspoon Console",
          ""
        ]
      }
    ],
    "Variable" : [

    ],
    "stripped_doc" : [

    ],
    "Deprecated" : [

    ],
    "desc" : "",
    "type" : "Module",
    "Constructor" : [
      {
        "doc" : "Create a new local ipcObject for receiving and responding to messages from a remote port\n\nParameters:\n * name - a string acting as the message port name.\n * fn   - the callback function which will receive messages.\n\nReturns:\n * the ipc object\n\nNotes:\n * a remote port can send messages at any time to a local port; a local port can only respond to messages from a remote port",
        "desc" : "Create a new local ipcObject for receiving and responding to messages from a remote port",
        "def" : "hs.ipc2.localPort(name, fn) -> ipcObject",
        "stripped_doc" : [
          "Create a new local ipcObject for receiving and responding to messages from a remote port",
          ""
        ],
        "notes" : [
          " * a remote port can send messages at any time to a local port; a local port can only respond to messages from a remote port"
        ],
        "signature" : "hs.ipc2.localPort(name, fn) -> ipcObject",
        "type" : "Constructor",
        "returns" : [
          " * the ipc object",
          ""
        ],
        "name" : "localPort",
        "parameters" : [
          " * name - a string acting as the message port name.",
          " * fn   - the callback function which will receive messages.",
          ""
        ]
      },
      {
        "doc" : "Create a new remote ipcObject for sending messages asynchronously to a local port\n\nParameters:\n * name - a string acting as the message port name.\n\nReturns:\n * the ipc object\n\nNotes:\n * a remote port can send messages at any time to a local port; a local port can only respond to messages from a remote port",
        "desc" : "Create a new remote ipcObject for sending messages asynchronously to a local port",
        "def" : "hs.ipc2.remotePort(name) -> ipcObject",
        "stripped_doc" : [
          "Create a new remote ipcObject for sending messages asynchronously to a local port",
          ""
        ],
        "notes" : [
          " * a remote port can send messages at any time to a local port; a local port can only respond to messages from a remote port"
        ],
        "signature" : "hs.ipc2.remotePort(name) -> ipcObject",
        "type" : "Constructor",
        "returns" : [
          " * the ipc object",
          ""
        ],
        "name" : "remotePort",
        "parameters" : [
          " * name - a string acting as the message port name.",
          ""
        ]
      }
    ],
    "doc" : "Provides the server portion of the Hammerspoon command line interface\nNote that in order to use the command line tool, you will need to explicitly load `hs.ipc2` in your init.lua. The simplest way to do that is `require(\"hs.ipc2\")`\n\nThis module is based primarily on code from Mjolnir by [Steven Degutis](https:\/\/github.com\/sdegutis\/).",
    "Field" : [

    ],
    "Command" : [

    ],
    "Method" : [
      {
        "doc" : "Returns the name the ipcObject uses for its port when active\n\nParameters:\n * None\n\nReturns:\n * the port name as a string",
        "desc" : "Returns the name the ipcObject uses for its port when active",
        "def" : "hs.ipc2:name() -> string",
        "stripped_doc" : [
          "Returns the name the ipcObject uses for its port when active",
          ""
        ],
        "notes" : [

        ],
        "signature" : "hs.ipc2:name() -> string",
        "type" : "Method",
        "returns" : [
          " * the port name as a string"
        ],
        "name" : "name",
        "parameters" : [
          " * None",
          ""
        ]
      },
      {
        "doc" : "Returns whether or not the ipcObject represents a remote or local port\n\nParameters:\n * None\n\nReturns:\n * true if the object is a remote port, otherwise false\n\nNotes:\n * a remote port can send messages at any time to a local port; a local port can only respond to messages from a remote port",
        "desc" : "Returns whether or not the ipcObject represents a remote or local port",
        "def" : "hs.ipc2:isRemote() -> boolean",
        "stripped_doc" : [
          "Returns whether or not the ipcObject represents a remote or local port",
          ""
        ],
        "notes" : [
          " * a remote port can send messages at any time to a local port; a local port can only respond to messages from a remote port"
        ],
        "signature" : "hs.ipc2:isRemote() -> boolean",
        "type" : "Method",
        "returns" : [
          " * true if the object is a remote port, otherwise false",
          ""
        ],
        "name" : "isRemote",
        "parameters" : [
          " * None",
          ""
        ]
      },
      {
        "doc" : "Returns whether or not the ipcObject port is still valid or not\n\nParameters:\n * None\n\nReturns:\n * true if the object is a valid port, otherwise false",
        "desc" : "Returns whether or not the ipcObject port is still valid or not",
        "def" : "hs.ipc2:isValid() -> boolean",
        "stripped_doc" : [
          "Returns whether or not the ipcObject port is still valid or not",
          ""
        ],
        "notes" : [

        ],
        "signature" : "hs.ipc2:isValid() -> boolean",
        "type" : "Method",
        "returns" : [
          " * true if the object is a valid port, otherwise false"
        ],
        "name" : "isValid",
        "parameters" : [
          " * None",
          ""
        ]
      },
      {
        "doc" : "Sends a message from a remote port to a local port\n\nParameters:\n * data        - any data type which is to be sent to the local port.  The data will be converted into its string representation\n * msgID       - an integer message ID\n * waitTimeout - an optional number, default 2.0, representing the number of seconds the method will wait to send the message and then wait for a response.  The method *may* block up to twice this number of seconds, though usually it will be shorter.\n * oneWay      -  an optional boolean, default false, indicating whether or not to wait for a response.  It this is true, the second returned argument will be nil.\n\nReturns:\n * status   - a boolean indicathing whether or not the local port responded before the timeout (true) or if an error or timeout occurred waiting for the response (false)\n * response - the response from the local port, usually a string, but may be nil if there was no response returned.  If status is false, will contain an error message describing the error.",
        "desc" : "Sends a message from a remote port to a local port",
        "def" : "hs.ipc2:sendMessage(data, msgID, [waitTimeout], [oneWay]) -> status, response",
        "stripped_doc" : [
          "Sends a message from a remote port to a local port",
          ""
        ],
        "notes" : [

        ],
        "signature" : "hs.ipc2:sendMessage(data, msgID, [waitTimeout], [oneWay]) -> status, response",
        "type" : "Method",
        "returns" : [
          " * status   - a boolean indicathing whether or not the local port responded before the timeout (true) or if an error or timeout occurred waiting for the response (false)",
          " * response - the response from the local port, usually a string, but may be nil if there was no response returned.  If status is false, will contain an error message describing the error."
        ],
        "name" : "sendMessage",
        "parameters" : [
          " * data        - any data type which is to be sent to the local port.  The data will be converted into its string representation",
          " * msgID       - an integer message ID",
          " * waitTimeout - an optional number, default 2.0, representing the number of seconds the method will wait to send the message and then wait for a response.  The method *may* block up to twice this number of seconds, though usually it will be shorter.",
          " * oneWay      -  an optional boolean, default false, indicating whether or not to wait for a response.  It this is true, the second returned argument will be nil.",
          ""
        ]
      },
      {
        "doc" : "Deletes the ipcObject, stopping it as well if necessary\n\nParameters:\n * None\n\nReturns:\n * None",
        "desc" : "Deletes the ipcObject, stopping it as well if necessary",
        "def" : "hs.ipc2:delete() -> None",
        "stripped_doc" : [
          "Deletes the ipcObject, stopping it as well if necessary",
          ""
        ],
        "notes" : [

        ],
        "signature" : "hs.ipc2:delete() -> None",
        "type" : "Method",
        "returns" : [
          " * None"
        ],
        "name" : "delete",
        "parameters" : [
          " * None",
          ""
        ]
      }
    ],
    "items" : [
      {
        "doc" : "Gets the terminal escape codes used to produce colors in the `hs` command line tool\n\nParameters:\n * None\n\nReturns:\n * A table containing the terminal escape codes used to produce colors. The available keys are:\n  * initial\n  * input\n  * output\n  * error",
        "desc" : "Gets the terminal escape codes used to produce colors in the `hs` command line tool",
        "def" : "hs.ipc2.cliGetColors() -> table",
        "stripped_doc" : [
          "Gets the terminal escape codes used to produce colors in the `hs` command line tool",
          ""
        ],
        "notes" : [

        ],
        "signature" : "hs.ipc2.cliGetColors() -> table",
        "type" : "Function",
        "returns" : [
          " * A table containing the terminal escape codes used to produce colors. The available keys are:",
          "  * initial",
          "  * input",
          "  * output",
          "  * error"
        ],
        "name" : "cliGetColors",
        "parameters" : [
          " * None",
          ""
        ]
      },
      {
        "doc" : "Installs the `hs` command line tool\n\nParameters:\n * path - An optional string containing a path to install the tool in. Defaults to `\/usr\/local`\n * silent - An optional boolean indicating whether or not to print errors to the Hammerspoon Console\n\nReturns:\n * A boolean, true if the tool was successfully installed, otherwise false\n\nNotes:\n * If this function fails, it is likely that you have some old\/broken symlinks. You can use `hs.ipc2.cliUninstall()` to forcibly tidy them up",
        "desc" : "Installs the `hs` command line tool",
        "def" : "hs.ipc2.cliInstall([path][,silent]) -> bool",
        "stripped_doc" : [
          "Installs the `hs` command line tool",
          ""
        ],
        "notes" : [
          " * If this function fails, it is likely that you have some old\/broken symlinks. You can use `hs.ipc2.cliUninstall()` to forcibly tidy them up"
        ],
        "signature" : "hs.ipc2.cliInstall([path][,silent]) -> bool",
        "type" : "Function",
        "returns" : [
          " * A boolean, true if the tool was successfully installed, otherwise false",
          ""
        ],
        "name" : "cliInstall",
        "parameters" : [
          " * path - An optional string containing a path to install the tool in. Defaults to `\/usr\/local`",
          " * silent - An optional boolean indicating whether or not to print errors to the Hammerspoon Console",
          ""
        ]
      },
      {
        "doc" : "Restores default terminal escape codes used to produce colors in the `hs` command line tool\n\nParameters:\n * None\n\nReturns:\n * None",
        "desc" : "Restores default terminal escape codes used to produce colors in the `hs` command line tool",
        "def" : "hs.ipc2.cliResetColors()",
        "stripped_doc" : [
          "Restores default terminal escape codes used to produce colors in the `hs` command line tool",
          ""
        ],
        "notes" : [

        ],
        "signature" : "hs.ipc2.cliResetColors()",
        "type" : "Function",
        "returns" : [
          " * None"
        ],
        "name" : "cliResetColors",
        "parameters" : [
          " * None",
          ""
        ]
      },
      {
        "doc" : "Sets the terminal escape codes used to produce colors in the `hs` command line tool\n\nParameters:\n * table - A table of terminal escape sequences (or empty strings if you wish to suppress the usage of colors) containing the following keys:\n  * initial\n  * input\n  * output\n  * error\n\nReturns:\n * A table containing the terminal escape codes that have been set. The available keys match the table parameter.\n\nNotes:\n * For a brief intro into terminal colors, you can visit a web site like this one [http:\/\/jafrog.com\/2013\/11\/23\/colors-in-terminal.html](http:\/\/jafrog.com\/2013\/11\/23\/colors-in-terminal.html)\n * Lua doesn't support octal escapes in it's strings, so use `\\x1b` or `\\27` to indicate the `escape` character e.g. `ipc2.cliSetColors{ initial = \"\", input = \"\\27[33m\", output = \"\\27[38;5;11m\" }`\n * The values are stored by the `hs.settings` extension, so will persist across restarts of Hammerspoon",
        "desc" : "Sets the terminal escape codes used to produce colors in the `hs` command line tool",
        "def" : "hs.ipc2.cliSetColors(table) -> table",
        "stripped_doc" : [
          "Sets the terminal escape codes used to produce colors in the `hs` command line tool",
          ""
        ],
        "notes" : [
          " * For a brief intro into terminal colors, you can visit a web site like this one [http:\/\/jafrog.com\/2013\/11\/23\/colors-in-terminal.html](http:\/\/jafrog.com\/2013\/11\/23\/colors-in-terminal.html)",
          " * Lua doesn't support octal escapes in it's strings, so use `\\x1b` or `\\27` to indicate the `escape` character e.g. `ipc2.cliSetColors{ initial = \"\", input = \"\\27[33m\", output = \"\\27[38;5;11m\" }`",
          " * The values are stored by the `hs.settings` extension, so will persist across restarts of Hammerspoon"
        ],
        "signature" : "hs.ipc2.cliSetColors(table) -> table",
        "type" : "Function",
        "returns" : [
          " * A table containing the terminal escape codes that have been set. The available keys match the table parameter.",
          ""
        ],
        "name" : "cliSetColors",
        "parameters" : [
          " * table - A table of terminal escape sequences (or empty strings if you wish to suppress the usage of colors) containing the following keys:",
          "  * initial",
          "  * input",
          "  * output",
          "  * error",
          ""
        ]
      },
      {
        "doc" : "Gets the status of the `hs` command line tool\n\nParameters:\n * path - An optional string containing a path to look for the `hs` tool. Defaults to `\/usr\/local`\n * silent - An optional boolean indicating whether or not to print errors to the Hammerspoon Console\n\nReturns:\n * A boolean, true if the `hs` command line tool is correctly installed, otherwise false",
        "desc" : "Gets the status of the `hs` command line tool",
        "def" : "hs.ipc2.cliStatus([path][,silent]) -> bool",
        "stripped_doc" : [
          "Gets the status of the `hs` command line tool",
          ""
        ],
        "notes" : [

        ],
        "signature" : "hs.ipc2.cliStatus([path][,silent]) -> bool",
        "type" : "Function",
        "returns" : [
          " * A boolean, true if the `hs` command line tool is correctly installed, otherwise false"
        ],
        "name" : "cliStatus",
        "parameters" : [
          " * path - An optional string containing a path to look for the `hs` tool. Defaults to `\/usr\/local`",
          " * silent - An optional boolean indicating whether or not to print errors to the Hammerspoon Console",
          ""
        ]
      },
      {
        "doc" : "Uninstalls the `hs` command line tool\n\nParameters:\n * path - An optional string containing a path to remove the tool from. Defaults to `\/usr\/local`\n * silent - An optional boolean indicating whether or not to print errors to the Hammerspoon Console\n\nReturns:\n * A boolean, true if the tool was successfully removed, otherwise false\n\nNotes:\n * This function used to be very conservative and refuse to remove symlinks it wasn't sure about, but now it will unconditionally remove whatever it finds at `path\/bin\/hs` and `path\/share\/man\/man1\/hs.1`. This is more likely to be useful in situations where this command is actually needed (please open an Issue on GitHub if you disagree!)",
        "desc" : "Uninstalls the `hs` command line tool",
        "def" : "hs.ipc2.cliUninstall([path][,silent]) -> bool",
        "stripped_doc" : [
          "Uninstalls the `hs` command line tool",
          ""
        ],
        "notes" : [
          " * This function used to be very conservative and refuse to remove symlinks it wasn't sure about, but now it will unconditionally remove whatever it finds at `path\/bin\/hs` and `path\/share\/man\/man1\/hs.1`. This is more likely to be useful in situations where this command is actually needed (please open an Issue on GitHub if you disagree!)"
        ],
        "signature" : "hs.ipc2.cliUninstall([path][,silent]) -> bool",
        "type" : "Function",
        "returns" : [
          " * A boolean, true if the tool was successfully removed, otherwise false",
          ""
        ],
        "name" : "cliUninstall",
        "parameters" : [
          " * path - An optional string containing a path to remove the tool from. Defaults to `\/usr\/local`",
          " * silent - An optional boolean indicating whether or not to print errors to the Hammerspoon Console",
          ""
        ]
      },
      {
        "doc" : "Create a new local ipcObject for receiving and responding to messages from a remote port\n\nParameters:\n * name - a string acting as the message port name.\n * fn   - the callback function which will receive messages.\n\nReturns:\n * the ipc object\n\nNotes:\n * a remote port can send messages at any time to a local port; a local port can only respond to messages from a remote port",
        "desc" : "Create a new local ipcObject for receiving and responding to messages from a remote port",
        "def" : "hs.ipc2.localPort(name, fn) -> ipcObject",
        "stripped_doc" : [
          "Create a new local ipcObject for receiving and responding to messages from a remote port",
          ""
        ],
        "notes" : [
          " * a remote port can send messages at any time to a local port; a local port can only respond to messages from a remote port"
        ],
        "signature" : "hs.ipc2.localPort(name, fn) -> ipcObject",
        "type" : "Constructor",
        "returns" : [
          " * the ipc object",
          ""
        ],
        "name" : "localPort",
        "parameters" : [
          " * name - a string acting as the message port name.",
          " * fn   - the callback function which will receive messages.",
          ""
        ]
      },
      {
        "doc" : "Create a new remote ipcObject for sending messages asynchronously to a local port\n\nParameters:\n * name - a string acting as the message port name.\n\nReturns:\n * the ipc object\n\nNotes:\n * a remote port can send messages at any time to a local port; a local port can only respond to messages from a remote port",
        "desc" : "Create a new remote ipcObject for sending messages asynchronously to a local port",
        "def" : "hs.ipc2.remotePort(name) -> ipcObject",
        "stripped_doc" : [
          "Create a new remote ipcObject for sending messages asynchronously to a local port",
          ""
        ],
        "notes" : [
          " * a remote port can send messages at any time to a local port; a local port can only respond to messages from a remote port"
        ],
        "signature" : "hs.ipc2.remotePort(name) -> ipcObject",
        "type" : "Constructor",
        "returns" : [
          " * the ipc object",
          ""
        ],
        "name" : "remotePort",
        "parameters" : [
          " * name - a string acting as the message port name.",
          ""
        ]
      },
      {
        "doc" : "Deletes the ipcObject, stopping it as well if necessary\n\nParameters:\n * None\n\nReturns:\n * None",
        "desc" : "Deletes the ipcObject, stopping it as well if necessary",
        "def" : "hs.ipc2:delete() -> None",
        "stripped_doc" : [
          "Deletes the ipcObject, stopping it as well if necessary",
          ""
        ],
        "notes" : [

        ],
        "signature" : "hs.ipc2:delete() -> None",
        "type" : "Method",
        "returns" : [
          " * None"
        ],
        "name" : "delete",
        "parameters" : [
          " * None",
          ""
        ]
      },
      {
        "doc" : "Returns whether or not the ipcObject represents a remote or local port\n\nParameters:\n * None\n\nReturns:\n * true if the object is a remote port, otherwise false\n\nNotes:\n * a remote port can send messages at any time to a local port; a local port can only respond to messages from a remote port",
        "desc" : "Returns whether or not the ipcObject represents a remote or local port",
        "def" : "hs.ipc2:isRemote() -> boolean",
        "stripped_doc" : [
          "Returns whether or not the ipcObject represents a remote or local port",
          ""
        ],
        "notes" : [
          " * a remote port can send messages at any time to a local port; a local port can only respond to messages from a remote port"
        ],
        "signature" : "hs.ipc2:isRemote() -> boolean",
        "type" : "Method",
        "returns" : [
          " * true if the object is a remote port, otherwise false",
          ""
        ],
        "name" : "isRemote",
        "parameters" : [
          " * None",
          ""
        ]
      },
      {
        "doc" : "Returns whether or not the ipcObject port is still valid or not\n\nParameters:\n * None\n\nReturns:\n * true if the object is a valid port, otherwise false",
        "desc" : "Returns whether or not the ipcObject port is still valid or not",
        "def" : "hs.ipc2:isValid() -> boolean",
        "stripped_doc" : [
          "Returns whether or not the ipcObject port is still valid or not",
          ""
        ],
        "notes" : [

        ],
        "signature" : "hs.ipc2:isValid() -> boolean",
        "type" : "Method",
        "returns" : [
          " * true if the object is a valid port, otherwise false"
        ],
        "name" : "isValid",
        "parameters" : [
          " * None",
          ""
        ]
      },
      {
        "doc" : "Returns the name the ipcObject uses for its port when active\n\nParameters:\n * None\n\nReturns:\n * the port name as a string",
        "desc" : "Returns the name the ipcObject uses for its port when active",
        "def" : "hs.ipc2:name() -> string",
        "stripped_doc" : [
          "Returns the name the ipcObject uses for its port when active",
          ""
        ],
        "notes" : [

        ],
        "signature" : "hs.ipc2:name() -> string",
        "type" : "Method",
        "returns" : [
          " * the port name as a string"
        ],
        "name" : "name",
        "parameters" : [
          " * None",
          ""
        ]
      },
      {
        "doc" : "Sends a message from a remote port to a local port\n\nParameters:\n * data        - any data type which is to be sent to the local port.  The data will be converted into its string representation\n * msgID       - an integer message ID\n * waitTimeout - an optional number, default 2.0, representing the number of seconds the method will wait to send the message and then wait for a response.  The method *may* block up to twice this number of seconds, though usually it will be shorter.\n * oneWay      -  an optional boolean, default false, indicating whether or not to wait for a response.  It this is true, the second returned argument will be nil.\n\nReturns:\n * status   - a boolean indicathing whether or not the local port responded before the timeout (true) or if an error or timeout occurred waiting for the response (false)\n * response - the response from the local port, usually a string, but may be nil if there was no response returned.  If status is false, will contain an error message describing the error.",
        "desc" : "Sends a message from a remote port to a local port",
        "def" : "hs.ipc2:sendMessage(data, msgID, [waitTimeout], [oneWay]) -> status, response",
        "stripped_doc" : [
          "Sends a message from a remote port to a local port",
          ""
        ],
        "notes" : [

        ],
        "signature" : "hs.ipc2:sendMessage(data, msgID, [waitTimeout], [oneWay]) -> status, response",
        "type" : "Method",
        "returns" : [
          " * status   - a boolean indicathing whether or not the local port responded before the timeout (true) or if an error or timeout occurred waiting for the response (false)",
          " * response - the response from the local port, usually a string, but may be nil if there was no response returned.  If status is false, will contain an error message describing the error."
        ],
        "name" : "sendMessage",
        "parameters" : [
          " * data        - any data type which is to be sent to the local port.  The data will be converted into its string representation",
          " * msgID       - an integer message ID",
          " * waitTimeout - an optional number, default 2.0, representing the number of seconds the method will wait to send the message and then wait for a response.  The method *may* block up to twice this number of seconds, though usually it will be shorter.",
          " * oneWay      -  an optional boolean, default false, indicating whether or not to wait for a response.  It this is true, the second returned argument will be nil.",
          ""
        ]
      }
    ],
    "name" : "hs.ipc2"
  }
]